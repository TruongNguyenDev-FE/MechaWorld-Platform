import Cookies from 'js-cookie';
import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Form, Input, Button, message, Modal } from "antd";
import { PhoneOutlined, LockOutlined } from "@ant-design/icons";

import { updateUser } from "../../features/auth/authSlice";
import { verifyToken, verifyOtp, verifyPhone } from '../../apis/Authentication/APIAuth';
import { GetShopInfoById } from '../../apis/Seller Profile/APISellerProfile';
import { GetUserByPhone } from '../../apis/User/APIUser';

const FirstForm = ({ form, setIsPhoneVerified }) => {

    const user = useSelector((state) => state.auth.user);
    const vietnamPhoneRegex = /^(03|05|07|08|09)[0-9]{8}$/;

    const [email, setEmail] = useState(user?.email || "");
    const [shopName, setShopName] = useState("");
    const [newPhoneNumber, setNewPhoneNumber] = useState(user?.phone_number || "");
    const [shopExists, setShopExists] = useState(false); // Tr·∫°ng th√°i ƒë·ªÉ bi·∫øt shop ƒë√£ t·ªìn t·∫°i hay ch∆∞a

    const [phoneNumber, setPhoneNumber] = useState("");
    const [modalVisible, setModalVisible] = useState(false);
    const [step, setStep] = useState(1); // Step 1: Nh·∫≠p SƒêT, Step 2: Nh·∫≠p OTP

    const [otp, setOtp] = useState("");
    const [otpCode, setOtpCode] = useState("");
    const [otpVisible, setOtpVisible] = useState(false);

    const [countdown, setCountdown] = useState(60);
    const [isResendDisabled, setIsResendDisabled] = useState(true);


    const dispatch = useDispatch();

    // C·∫≠p nh·∫≠t c√°c State khi user c√≥ thay ƒë·ªïi
    useEffect(() => {
        setEmail(user?.email || "");
        setNewPhoneNumber(user?.phone_number || "");
    }, [user]);


    // L·∫•y Th√¥ng tin User t·ª´ Cookie
    useEffect(() => {
        const access_token = Cookies.get('access_token');
        if (access_token) {
            try {
                verifyToken(access_token).then(response => {
                    // console.log("Data user", response.data);

                    setEmail(response.data.email);
                    // setFullName(response.data.full_name);
                    setNewPhoneNumber(response.data.phone_number);

                    // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i x√°c th·ª±c
                    if (response.data.phone_number) {
                        setIsPhoneVerified(true);
                    }
                });
            } catch (error) {
                console.error("L·ªói l·∫•y Th√¥ng tin User:", error);
            }
        }
    }, []);


    // H√†m x·ª≠ l√Ω Thay ƒë·ªïi t√™n Shop
    useEffect(() => {
        if (user) {
            // form.setFieldsValue({ full_name: user?.shop_name });
            form.setFieldsValue({ email: user?.email });
        }
    }, [user, form]);


    // H√†m Ki·ªÉm tra ID user xem ƒë√£ l√† Shop ch∆∞a, n·∫øu ch∆∞a th√¨ TextBox ƒë·ªÉ tr·ªëng. v√† G·ªçi h√†m Create Shop Name
    // Fetch Shop Info

    // Ki·ªÉm tra xem user ƒë√£ c√≥ Shop ch∆∞a
    const shopID = user?.id;

    useEffect(() => {
        if (!shopID) return;

        const fetchShopInfo = async () => {
            try {
                const response = await GetShopInfoById(shopID);
                // console.log("Shop:", response);
                if (response?.data?.shop_name) {
                    setShopName(response.data.shop_name);
                    setShopExists(true); // ƒê√°nh d·∫•u ƒë√£ c√≥ shop
                    form.setFieldsValue({ shop_name: response.data.shop_name }); // ƒê·∫∑t gi√° tr·ªã v√†o form
                }
            } catch (error) {
                console.log("Shop ch∆∞a t·ªìn t·∫°i:", error);
                setShopExists(false); // ƒê√°nh d·∫•u ch∆∞a c√≥ shop
                form.setFieldsValue({ shop_name: "" }); // ƒê·∫∑t gi√° tr·ªã tr·ªëng v√†o form
            }
        };

        fetchShopInfo();
    }, [shopID, form]);

    // H√†m x·ª≠ l√Ω khi t√™n shop thay ƒë·ªïi
    const handleNameChange = (e) => {
        setShopName(e.target.value);
        form.setFieldsValue({ shop_name: e.target.value }); // C·∫≠p nh·∫≠t gi√° tr·ªã v√†o form
    };

    // N·∫øu shop ƒë√£ t·ªìn t·∫°i v√† ng∆∞·ªùi d√πng thay ƒë·ªïi t√™n, th√¨ c·∫≠p nh·∫≠t t√™n shop
    useEffect(() => {
        // L∆∞u th√¥ng tin t√™n shop ban ƒë·∫ßu ƒë·ªÉ so s√°nh khi c√≥ thay ƒë·ªïi
        const originalShopName = form.getFieldValue('shop_name');

        return () => {
            // Trong cleanup function, ki·ªÉm tra xem t√™n shop c√≥ thay ƒë·ªïi kh√¥ng
            if (shopExists && originalShopName !== form.getFieldValue('shop_name')) {
                // N·∫øu c√≥ thay ƒë·ªïi, s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong component cha khi ng∆∞·ªùi d√πng nh·∫•n "Ti·∫øp theo"
                console.log("T√™n shop ƒë√£ thay ƒë·ªïi, s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t khi ti·∫øp t·ª•c");
            }
        };
    }, [shopExists, form]);


    //  Check User Detail by phone
    const CheckIfUserExisted = async () => {
        const response = await GetUserByPhone(phoneNumber);
        // console.log(response);
        return response;
    };

    // G·ª≠i OTP
    const handleSendOtp = async () => {
        // Validate Ko nh·∫≠p Sƒët
        if (!phoneNumber) {
            message.error("Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!");
            return;
        }

        // Validate Nh·∫≠p Sƒët kh√¥ng h·ª£p l·ªá
        const vietnamPhoneRegex = /^(03|05|07|08|09)[0-9]{8}$/;
        if (!vietnamPhoneRegex.test(phoneNumber)) {
            message.error("S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!");
            return;
        }

        try {
            // ‚úÖ PH·∫¢I G·ªåI FUNCTION V√Ä AWAIT
            const userExistResponse = await CheckIfUserExisted();

            // Ki·ªÉm tra sƒët t·ªìn t·∫°i
            if (userExistResponse.status === 200) {
                message.error("S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i.");
                return;
            }
        } catch (error) {
            // N·∫øu API tr·∫£ v·ªÅ l·ªói 404 (kh√¥ng t√¨m th·∫•y user) th√¨ OK ƒë·ªÉ ti·∫øp t·ª•c
            if (error.response?.status !== 404) {
                message.error("L·ªói khi ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i!");
                return;
            }
            // N·∫øu 404 th√¨ c√≥ nghƒ©a l√† s·ªë ƒëi·ªán tho·∫°i ch∆∞a t·ªìn t·∫°i, ti·∫øp t·ª•c g·ª≠i OTP
        }

        // Ti·∫øp t·ª•c g·ª≠i OTP n·∫øu s·ªë ƒëi·ªán tho·∫°i ch∆∞a t·ªìn t·∫°i
        try {
            const response = await verifyPhone(phoneNumber);
            const otpValue = response.data.otp_code;

            setOtpCode(otpValue);

            if (response.status === 200) {
                setStep(2);
                message.success('M√£ OTP ƒë√£ g·ª≠i th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra tin nh·∫Øn.')
                setOtpVisible(true);
                setIsResendDisabled(true);
                setCountdown(60);
                const interval = setInterval(() => {
                    setCountdown((prev) => {
                        if (prev === 1) {
                            clearInterval(interval);
                            setIsResendDisabled(false);
                        }
                        return prev - 1;
                    });
                }, 1000);
            }
        } catch (error) {
            message.error("Kh√¥ng th·ªÉ g·ª≠i OTP! Vui l√≤ng th·ª≠ l·∫°i.");
        }
    };


    // H√†m x√°c th·ª±c OTP
    const handleVerifyOtp = async () => {
        // console.log("üì© ƒê√£ g·ªçi handleVerifyOtp");
        // console.log("üî¢ OTP hi·ªán t·∫°i:", otp);

        if (!otp) {
            message.error("Vui l√≤ng nh·∫≠p m√£ OTP!");
            return;
        }

        try {
            const response = await verifyOtp(user?.id, phoneNumber, otp);
            console.log("‚úÖ X√°c th·ª±c OTP Response:", response);

            if (response.status === 200) {
                message.success("X√°c th·ª±c OTP th√†nh c√¥ng!");
                setOtpVisible(false);
                setModalVisible(false); // ƒê·∫£m b·∫£o ƒë√∫ng c√°ch ƒë√≥ng modal
                setIsPhoneVerified(true);
                setOtp("");
                setStep(1);

                // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng v·ªõi s·ªë ƒëi·ªán tho·∫°i m·ªõi
                dispatch(updateUser({
                    ...user,  // gi·ªØ l·∫°i c√°c th√¥ng tin hi·ªán c√≥
                    phone_number: phoneNumber  // c·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i
                }));

            }
        } catch (error) {
            const statusCode = error.response?.status || error.status;
            switch (statusCode) {
                case 400:
                    message.error("M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
                    break;

                case 401:
                    message.error("Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
                    break;

                default:
                    // console.error("OTP verification error:", error);
                    message.error("L·ªói khi x√°c th·ª±c OTP. Vui l√≤ng th·ª≠ l·∫°i sau.");
                    break;
            }
        }
    };

    const prefixSelector = (
        <div className="bg-gray-100 border-r border-gray-300 px-2 mr-2 flex items-center h-full">
            <img
                src="https://upload.wikimedia.org/wikipedia/commons/2/21/Flag_of_Vietnam.svg"
                alt="Vietnam flag"
                className="w-5 h-3 mr-1"
            />
            (+84)
        </div>
    );

    return (
        <>
            <div className="max-w-2xl mx-auto space-y-4 gap-4">

                <div className="first-form-header">
                    <h2 className="text-xl font-bold">NH·∫¨P TH√îNG TIN C·ª¶A SHOP</h2>
                    <p className="text-gray-500">
                        Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin c·ª≠a h√†ng c·ªßa b·∫°n.
                        Nh·ªØng th√¥ng tin n√†y s·∫Ω gi√∫p kh√°ch h√†ng d·ªÖ d√†ng nh·∫≠n di·ªán v√† t√¨m ki·∫øm SHOP c·ªßa b·∫°n tr√™n n·ªÅn t·∫£ng.
                    </p>
                    {/* <p className="text-red-500 mt-2 italic text-sm">L∆∞u √Ω: T√†i kho·∫£n ng∆∞·ªùi d√πng v√† t√†i kho·∫£n Shop s·∫Ω c√≥ c√πng s·ª≠ d·ª•ng m·ªôt t√™n duy nh·∫•t.</p> */}
                </div>

                {/* Input shop name */}
                <Form.Item
                    label="T√™n c·ª≠a h√†ng"
                    name="shop_name"
                    rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n Shop s·ª≠ d·ª•ng!" }]}
                >
                    <Input
                        value={shopName}
                        onChange={handleNameChange}
                        placeholder={shopExists ? "C·∫≠p nh·∫≠t t√™n Shop" : "Nh·∫≠p t√™n Shop m·ªõi"}
                    />
                </Form.Item>

                {/* Disply email */}
                <Form.Item
                    label={<span className="font-semibold">Email</span>}
                    name="email"
                    required
                >
                    <Input disabled value={email} />
                </Form.Item>

                {/* Display Phone Number */}
                <Form.Item
                    label={<span className="font-semibold">S·ªë ƒëi·ªán tho·∫°i</span>}
                    required
                >
                    <div className="flex items-center">
                        {newPhoneNumber ? (
                            <>
                                <span className="">{newPhoneNumber}</span>
                                <Button type="link" className="underline" onClick={() => setModalVisible(true)}>
                                    Thay ƒê·ªïi
                                </Button>
                            </>
                        ) : (
                            <Button type="link" className="text-blue-500 underline" onClick={() => setModalVisible(true)}>
                                Th√™m m·ªõi
                            </Button>
                        )}
                    </div>
                </Form.Item>


                <Modal
                    open={modalVisible}
                    onCancel={() => {
                        setModalVisible(false);
                        setStep(1);
                    }}
                    footer={null}
                    width={450}
                    centered
                    title={
                        <div className="text-center font-semibold text-lg">
                            {step === 1 ? "C·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i" : "X√°c Th·ª±c M√£ OTP"}
                        </div>
                    }
                >
                    <div className="text-center space-y-4">
                        {/* Nh·∫≠p S·ªë ƒêi·ªán Tho·∫°i */}
                        {step === 1 && (
                            <>
                                <div className="flex flex-col items-center mb-4">
                                    <div className="bg-blue-100 p-3 rounded-full mb-2">
                                        <PhoneOutlined className="text-3xl text-blue-500" />
                                    </div>
                                    <p className="text-gray-600 mb-4">Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ <br /> nh·∫≠n m√£ k√≠ch ho·∫°t OTP!</p>
                                </div>

                                <div className="mb-4">
                                    <Input
                                        addonBefore={prefixSelector}
                                        size="large"
                                        placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i (VD: 0912345678)"
                                        value={phoneNumber}
                                        onChange={(e) => setPhoneNumber(e.target.value)}
                                        className="mb-1"
                                        maxLength={10}
                                    />
                                    {!vietnamPhoneRegex.test(phoneNumber) && phoneNumber &&
                                        <div className="text-red-500 text-center text-sm mt-1">
                                            S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!
                                        </div>
                                    }
                                </div>

                                <Button
                                    type="primary"
                                    className="w-full bg-blue-500 hover:bg-blue-600 h-10"
                                    onClick={handleSendOtp}
                                    disabled={!vietnamPhoneRegex.test(phoneNumber)}
                                >
                                    G·ª≠i m√£ OTP
                                </Button>
                            </>
                        )}

                        {/* Nh·∫≠p OTP */}
                        {step === 2 && (
                            <>
                                <LockOutlined className="text-4xl text-blue-500 mb-2" />
                                <p className="text-gray-600 text-base">Nh·∫≠p m√£ OTP ƒë√£ g·ª≠i ƒë·∫øn <strong>{phoneNumber}</strong></p>
                                <Input.OTP
                                    size="large"
                                    placeholder="Nh·∫≠p m√£ OTP"
                                    maxLength={6}
                                    value={otp}
                                    onChange={(value) => setOtp(value)}
                                />
                                <Button
                                    type="primary"
                                    className="w-full bg-blue-500"
                                    onClick={handleVerifyOtp}
                                >
                                    X√°c th·ª±c OTP
                                </Button>
                                <div className="text-gray-500 text-sm mt-2">
                                    {isResendDisabled ? (
                                        `G·ª≠i l·∫°i m√£ sau ${countdown}s`
                                    ) : (
                                        <Button type="link" onClick={handleSendOtp}>
                                            G·ª≠i l·∫°i OTP
                                        </Button>
                                    )}
                                </div>
                            </>
                        )}
                    </div>
                </Modal>
            </div>
        </>
    );
};

export default FirstForm;
